### RBAC for kubelet
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    kubernetes.io/bootstrapping: rbac-defaults    # default cluster roles are labeled like this
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"   # API server updates default cluster roles with any missing permissions
  name: system:kube-apiserver-to-kubelet
rules:
  - apiGroups:
      - ""        # "" indicates the core API group
    resources:
      - nodes/proxy
      - nodes/stats
      - nodes/log
      - nodes/spec
      - nodes/metrics
    verbs:
      - "*"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:kube-apiserver
  namespace: ""
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:kube-apiserver-to-kubelet
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: User
    name: kubernetes
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: default
  name: pod-reading
rules:
- apiGroups:
    - ""
  resources:
    - pods 
    - pods/log
  verbs:
    - get
    - watch
    - list
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: read-pods
  namespace: default
subjects:
- kind: User
  name: dulli
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: pod-reading
  apiGroup: rbac.authorization.k8s.io
---
### Adding default Resource Limits to default Namespace
apiVersion: v1
kind: LimitRange
metadata:
  name: cpu-mem-limits
  namespace: default
spec:
  limits:
  - min:
      memory: 128Mi
      cpu: 0.2
    defaultRequest:
      memory: 128Mi
      cpu: 0.2
    default:
      memory: 128Mi
      cpu: 0.5
    max:
      memory: 1Gi
      cpu: 1
    type: Container

---
# A ClusterRole which instructs the CSR approver to approve a node renewing its
# own client credentials.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: approve-node-client-renewal-csr
rules:
- apiGroups: ["certificates.k8s.io"]
  resources: ["certificatesigningrequests/selfnodeclient"]
  verbs: ["create"]
---
# A ClusterRole which instructs the CSR approver to approve a node requesting a
# serving cert matching its client cert.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: approve-node-server-renewal-csr
rules:
- apiGroups: ["certificates.k8s.io"]
  resources: ["certificatesigningrequests/selfnodeserver"]
  verbs: ["create"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: node1-client-cert-renewal
subjects:
- kind: User
  name: system:node:kube-1.foo.io # Let "node-1" renew its client certificate.
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: approve-node-client-renewal-csr
  apiGroup: rbac.authorization.k8s.io
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: node2-client-cert-renewal
subjects:
- kind: User
  name: system:node:kube-2.foo.io # Let "node-1" renew its client certificate.
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: approve-node-client-renewal-csr
  apiGroup: rbac.authorization.k8s.io
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: node3-client-cert-renewal
subjects:
- kind: User
  name: system:node:kube-3.foo.io # Let "node-1" renew its client certificate.
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: approve-node-client-renewal-csr
  apiGroup: rbac.authorization.k8s.io
