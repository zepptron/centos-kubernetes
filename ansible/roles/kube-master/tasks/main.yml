---

- name: Ensure all needed directories are present
  when: master is defined
  file:
    state: directory
    path: "{{ item.path }}"
    mode: "{{ item.mode }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
  with_items: "{{ directories }}"
  tags: [kube-master]

- name: Ensure all needed binarys are present
  when: master is defined
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  with_items: "{{ binarys }}"
  tags: [kube-master]

- name: Ensure all k8s related certificates are present
  when: master is defined
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  with_items: "{{ certs }}"
  tags: [kube-master]

- name: Ensure all needed configs are present
  when: master is defined
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  with_items: "{{ configs }}"
  tags: [kube-master]

- name: Ensure all needed systemd unitfiles are present
  when: master is defined
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  with_items: "{{ systemd_units }}"
  tags: [kube-master]

- name: Ensure services have restarted
  when: master is defined
  systemd:
    state: restarted
    name: "{{ item.name }}"
    enabled: True
    daemon_reload: yes
  with_items: "{{ services }}"
  tags: [kube-master]

- name: insert ~/.bashrc hacks for good times
  when: master is defined
  blockinfile:
    path: "{{ item.path }}"
    block: |
      ## COLORS ##
      red=`tput setaf 1`
      green=`tput setaf 2`
      yellow=`tput setaf 3`
      reset=`tput sgr0`

      ## AUTOCOMPLETION ##
      source <(kubectl completion bash)

      ## ALIAS ##
      alias k="kubectl"
      alias ll="ls -lah"

      ## FUNCS ##
      function k-sys() {
        alias k="kubectl --namespace kube-system"
        printf "\n${red}kubectl --namespace kube-system active\n\n${reset}"
      }
      function k-pub() {
        alias k="kubectl --namespace kube-public"
        printf "\n${green}kubectl --namespace kube-public active\n\n${reset}"
      }
      function k-def() {
        alias k="kubectl"
        printf "\n${green}kubectl without namespace active\n\n${reset}"
      }
      function k-nodes() {
        for i in kube-{1..3}; do
          printf "${yellow}item: $i:${reset}\n"
          kubectl describe node $i.foo.io | grep -A4 "Allocated resources:"
        done
      }
  with_items: "{{ bashrc }}"
  tags: [kube-master]

# executing clusterroles.yml in files/ from to access the kubelets